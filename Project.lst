Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/15/16 10:03:00
template.asm						     Page 1 - 1


				; A word processor designed by Geoff Rich and Drew Roberts
				; ---------------------------------------------------------

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				getche PROTO C
				getch PROTO C

 = 00000032			lineLength = 50			; constant for number of chars in line
 = 00000002			numOfHeadingLines = 2	; number of header lines initially written to console
 = 00000003			tabSize = 3				; number of spaces equivalent to tab

 00000000			.data
 00000000  00000032 [		buffer BYTE lineLength DUP(20h), 0Dh, 0Ah, 0	; holds each individual line
	    20
	   ] 0D 0A 00
 00000035 74 68 69 73 6E	filename BYTE "thisname", 0					; name of file to read/write
	   61 6D 65 00
 0000003E 00000000		fileHandle HANDLE ?
 00000042 00000000		outHandle HANDLE ?

				; receives info about the console/cursor
 00000046 0000 0000 0000	consoleInfo CONSOLE_SCREEN_BUFFER_INFO < > 
	   0000 0000 0000
	   0000 0000 0000
	   0000 0000
 0000005C 0000 0000		cursorPos COORD < >
 00000060 00000019		cursorInfo CONSOLE_CURSOR_INFO <25,1>
	   00000001
 00000068 0000			windowHeight WORD ?

				; used for move optimizations
 0000006A FFFF			negOne WORD -1
 0000006C 0001			posOne WORD 1

 0000006E 08 20 08 00		backspaceStr BYTE 08h," ",08h,0 ; written when backspace key pressed

				; header lines
 00000072 5E 73 20 3D 20	commands BYTE "^s = SAVE, ^l = LOAD, ^b = BLUE, ^g = GREEN, ^r = RED, ^d = DEFAULT(LIGHT GRAY)", 0
	   53 41 56 45 2C
	   20 5E 6C 20 3D
	   20 4C 4F 41 44
	   2C 20 5E 62 20
	   3D 20 42 4C 55
	   45 2C 20 5E 67
	   20 3D 20 47 52
	   45 45 4E 2C 20
	   5E 72 20 3D 20
	   52 45 44 2C 20
	   5E 64 20 3D 20
	   44 45 46 41 55
	   4C 54 28 4C 49
	   47 48 54 20 47
	   52 41 59 29 00
 000000C2 2D 2D 2D 2D 2D	format BYTE "------------------------------------------------------", 0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00

				; prompt to enter filename to load
 000000F9 50 6C 65 61 73	enterFilename BYTE "Please enter the name of the file you wish to load: ", 0
	   65 20 65 6E 74
	   65 72 20 74 68
	   65 20 6E 61 6D
	   65 20 6F 66 20
	   74 68 65 20 66
	   69 6C 65 20 79
	   6F 75 20 77 69
	   73 68 20 74 6F
	   20 6C 6F 61 64
	   3A 20 00

 0000012E 00			lineCount BYTE 0
 0000012F 00000000		bytesRead DWORD ? ; used when reading from file

 00000000			.code
				; takes color input after caret is pressed
 00000000			TakeColorInput proc
 00000000  60				pushad
 00000001				blueT:
 00000001  83 F8 62				cmp eax, 62h
 00000004  75 0C				jne greenT
 00000006  B8 0000000B				mov eax, lightCyan
 0000000B  E8 00000000 E			call SetTextColor
 00000010  EB 31				jmp finish

 00000012				greenT:
 00000012  83 F8 67				cmp eax, 67h
 00000015  75 0C				jne redT
 00000017  B8 00000002				mov eax, green
 0000001C  E8 00000000 E			call SetTextColor
 00000021  EB 20				jmp finish

 00000023				redT:
 00000023  83 F8 72				cmp eax, 72h
 00000026  75 0C				jne default
 00000028  B8 0000000C				mov eax, lightRed
 0000002D  E8 00000000 E			call SetTextColor
 00000032  EB 0F				jmp finish

 00000034				default:
 00000034  83 F8 64				cmp eax, 64h
 00000037  75 0A				jne finish
 00000039  B8 00000007				mov eax, lightGray
 0000003E  E8 00000000 E			call SetTextColor

 00000043				finish: 
 00000043  61					popad
 00000044  C3					ret
 00000045			TakeColorInput endp

				; sets file pointer position based on current value of line count
				; so that the file pointer is set to the beginning of whatever line we're on
 00000045			SetFilePointerPosition proc
 00000045  60				pushad
 00000046  BB 00000034			mov ebx, lineLength + 2
 0000004B  B8 00000000			mov eax, 0
 00000050  A0 0000012E R		mov al, lineCount
 00000055  F7 E3			mul ebx
					INVOKE SetFilePointer, fileHandle, eax, NULL, FILE_BEGIN
 00000057  6A 00	   *	    push   +000000000h
 00000059  6A 00	   *	    push   +000000000h
 0000005B  50		   *	    push   eax
 0000005C  FF 35 0000003E R *	    push   fileHandle
 00000062  E8 00000000 E   *	    call   SetFilePointer
 00000067  61				popad
 00000068  C3				ret
 00000069			SetFilePointerPosition endp

				; writes the current line to file and resets the buffer
 00000069			MakeNewLine proc
 00000069  E8 00000000 E		call Crlf
 0000006E  E8 FFFFFFD2			call SetFilePointerPosition
 00000073  FE 05 0000012E R		inc lineCount
 00000079  A1 0000003E R		mov eax, fileHandle
 0000007E  BA 00000000 R		mov edx, OFFSET buffer
 00000083  B9 00000034			mov ecx, lineLength+2 ; allow for crlf at end of buffer
 00000088  E8 00000000 E		call WriteToFile
 0000008D  E8 0000001F			call ResetBuffer
 00000092  E8 FFFFFFAE			call SetFilePointerPosition
					INVOKE ReadFile, fileHandle, ADDR buffer, lineLength, ADDR bytesRead, NULL
 00000097  6A 00	   *	    push   +000000000h
 00000099  68 0000012F R   *	    push   OFFSET bytesRead
 0000009E  6A 32	   *	    push   +000000032h
 000000A0  68 00000000 R   *	    push   OFFSET buffer
 000000A5  FF 35 0000003E R *	    push   fileHandle
 000000AB  E8 00000000 E   *	    call   ReadFile
 000000B0  C3				ret
 000000B1			MakeNewLine endp

				; resets the buffer to hold all spaces
 000000B1			ResetBuffer proc
 000000B1  60				pushad
 000000B2  B9 00000032			mov ecx, lineLength
 000000B7  BE 00000000			mov esi, 0
 000000BC				L2:
 000000BC  C6 86 00000000 R			mov buffer[esi], 20h
	   20
 000000C3  46					inc esi
 000000C4  E2 F6				loop L2
 000000C6  61				popad
 000000C7  C3				ret
 000000C8			ResetBuffer endp

				; writes a tab to the screen (see tabSize constant)
				; if the end of the line is reached, it stops printing spaces
				; receives: ESI = current line position
				; returns: updated value of ESI
 000000C8			MakeTab proc
 000000C8  51				push ecx
 000000C9  50				push eax
 000000CA  B9 00000003			mov ecx, tabSize
 000000CF				tabs:
 000000CF  B8 00000020				mov eax, 20h
 000000D4  E8 00000000 E			call WriteChar
 000000D9  88 86 00000000 R			mov buffer[esi], al
 000000DF  46					inc esi
 000000E0  83 FE 32				cmp esi, lineLength
 000000E3  7D 02				jge finish
 000000E5  E2 E8				loop tabs
 000000E7				finish: 
 000000E7  59				pop ecx
 000000E8  58				pop eax
 000000E9  C3				ret
 000000EA			MakeTab endp

 000000EA			asmMain proc C
 000000EA  E8 00000000 E		call Crlf
					INVOKE CreateFile, ADDR filename, GENERIC_READ + GENERIC_WRITE, 0, 0, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
 000000EF  6A 00	   *	    push   +000000000h
 000000F1  68 00000080	   *	    push   +000000080h
 000000F6  6A 04	   *	    push   +000000004h
 000000F8  6A 00	   *	    push   +000000000h
 000000FA  6A 00	   *	    push   +000000000h
 000000FC  68 C0000000	   *	    push   +0C0000000h
 00000101  68 00000035 R   *	    push   OFFSET filename
 00000106  E8 00000000 E   *	    call   CreateFileA
 0000010B  A3 0000003E R		mov fileHandle, eax

					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000110  6A F5	   *	    push    -00000000Bh
 00000112  E8 00000000 E   *	    call   GetStdHandle
 00000117  A3 00000042 R		mov outHandle, eax
 0000011C  BE 00000000			mov esi, 0
					
 00000121  BA 00000072 R		mov edx, OFFSET commands
 00000126  E8 00000000 E		call WriteString
 0000012B  E8 00000000 E		call Crlf
 00000130  BA 000000C2 R		mov edx, OFFSET format
 00000135  E8 00000000 E		call WriteString
 0000013A  E8 00000000 E		call Crlf

 0000013F  E9 00000269			jmp readBytes

 00000144				L1:
 00000144  C7 05 00000060 R			mov cursorInfo.dwSize, 25
	   00000019
						INVOKE SetConsoleCursorInfo, outHandle, ADDR cursorInfo
 0000014E  68 00000060 R   *	    push   OFFSET cursorInfo
 00000153  FF 35 00000042 R *	    push   outHandle
 00000159  E8 00000000 E   *	    call   SetConsoleCursorInfo
 0000015E  E8 00000000 E			call getch

 00000163					newline:
 00000163  83 F8 0D					cmp eax, 0Dh
 00000166  75 0C					jne tabKey
 00000168  E8 FFFFFEFC					call MakeNewLine			
 0000016D  BE 00000000					mov esi, 0
 00000172  EB D0					jmp L1

 00000174					tabKey:
 00000174  83 F8 09					cmp eax, 09h
 00000177  75 05					jne caret
 00000179  E8 FFFFFF4A					call MakeTab

 0000017E					caret:
 0000017E  83 F8 5E					cmp eax, 5Eh ; caret key
 00000181  75 3D					jne backspace
 00000183  C7 05 00000060 R				mov cursorInfo.dwSize, 100
	   00000064
							INVOKE SetConsoleCursorInfo, outHandle, ADDR cursorInfo
 0000018D  68 00000060 R   *	    push   OFFSET cursorInfo
 00000192  FF 35 00000042 R *	    push   outHandle
 00000198  E8 00000000 E   *	    call   SetConsoleCursorInfo
 0000019D  E8 00000000 E				call getch
 000001A2  83 F8 5E					cmp eax, 5Eh ; caret again - return to normal functioning
 000001A5  74 9D					je L1

 000001A7  83 F8 73					cmp eax, 73h ; s - save and quit
 000001AA  0F 84 00000198				je save
 000001B0  83 F8 6C					cmp eax, 6Ch
 000001B3  0F 84 000001AF				je load
 000001B9  E8 FFFFFE42					call TakeColorInput ; otherwise check for colors
 000001BE  EB 84					jmp L1

 000001C0					backspace:
 000001C0  83 F8 08					cmp eax, 08h ; backspace
 000001C3  75 17					jne arrowkeys
 000001C5  C6 86 00000000 R					mov buffer[esi], 20h
	   20
 000001CC  4E							dec esi
 000001CD  BA 0000006E R					mov edx, OFFSET backspaceStr
 000001D2  E8 00000000 E					call WriteString
 000001D7  E9 0000014D						jmp zerocheckesi

 000001DC					arrowkeys:
 000001DC  3D 000000E0				cmp eax, 0e0h ; placed in buffer when arrow key pressed
 000001E1  0F 85 0000012A			jne checkcharbound
							; get cursor info and height of window
							INVOKE GetConsoleScreenBufferInfo, outHandle, ADDR consoleInfo
 000001E7  68 00000046 R   *	    push   OFFSET consoleInfo
 000001EC  FF 35 00000042 R *	    push   outHandle
 000001F2  E8 00000000 E   *	    call   GetConsoleScreenBufferInfo
 000001F7  66| A1					mov ax, consoleInfo.dwCursorPosition.X
	   0000004A R
 000001FD  66| A3					mov cursorPos.X, ax
	   0000005C R
 00000203  66| A1					mov ax, consoleInfo.dwCursorPosition.Y
	   0000004C R
 00000209  66| A3					mov cursorPos.Y, ax
	   0000005E R
 0000020F  66| A1					mov ax, consoleInfo.srWindow.Bottom
	   00000056 R
 00000215  66| A3					mov windowHeight, ax
	   00000068 R

 0000021B  E8 00000000 E				call getch ; additional char needs to be flushed out
 00000220  BB 00000000					mov ebx, 0 ; ebx holds amount to move cursor on the x axis
 00000225  83 F8 4B					cmp eax, 04bh ; left arrow
 00000228  75 28					jne checkright
 0000022A  66| 8B 1D						mov bx, negOne
	   0000006A R
 00000231  66| 83 3D						cmp cursorPos.X, 0
	   0000005C R 00
 00000239  75 17						jne checkright			; if we're already on the left
 0000023B  B8 00000048						mov eax, 048h			; act like the up arrow was pressed
 00000240  66| BB 0000						mov bx, 0
 00000244  66| 83 3D						cmp cursorPos.Y, numOfHeadingLines + 1
	   0000005E R 03
 0000024C  74 04						je checkright			; if we're not on the top line
 0000024E  66| BB 0031						mov bx, lineLength - 1	; move the cursor to the end of the line
 00000252						checkright:
 00000252  83 F8 4D					cmp eax, 04dh ; right arrow
 00000255  66| 0F 44 1D					cmove bx, posOne
	   0000006C R

 0000025D  66| 01 1D					add cursorPos.X, bx
	   0000005C R
 00000264  0F BF DB					movsx ebx,bx
 00000267  03 F3					add esi, ebx ; move buffer position as well

 00000269  BB 00000000					mov ebx,0
 0000026E  83 F8 48					cmp eax, 048h ; up arrow
 00000271  66| 0F 44 1D					cmove bx, negOne
	   0000006A R
 00000279  83 F8 50					cmp eax, 050h ; down arrow
 0000027C  66| 0F 44 1D					cmove bx, posOne
	   0000006C R

 00000284  66| 01 1D					add cursorPos.Y, bx
	   0000005E R

 0000028B						checkcursormin:
							; prevent cursor from moving up into the heading
 0000028B  66| 83 3D					cmp cursorPos.Y, numOfHeadingLines + 1
	   0000005E R 03
 00000293  7D 0C					jge checkcursormax
 00000295  66| C7 05					mov cursorPos.Y, numOfHeadingLines + 1
	   0000005E R
	   0003
 0000029E  66| 33 DB					xor bx, bx

 000002A1						checkcursormax:
							; prevent cursor from moving down too far
 000002A1  66| A1					mov ax, windowHeight
	   00000068 R
 000002A7  66| 39 05					cmp cursorPos.Y, ax
	   0000005E R
 000002AE  7E 09					jle finishCursor
 000002B0  66| A3					mov cursorPos.Y, ax
	   0000005E R
 000002B6  66| 33 DB					xor bx, bx

 000002B9						finishcursor:
							; set before changing lineCount so it writes to the start of current line
 000002B9  E8 FFFFFD87					call SetFilePointerPosition
 000002BE  0F BF DB					movsx ebx, bx
 000002C1  00 1D 0000012E R				add lineCount, bl

							; set the cursor position
							INVOKE SetConsoleCursorPosition, outHandle, cursorPos
 000002C7  FF 35 0000005C R *	    push   dword  ptr cursorPos
 000002CD  FF 35 00000042 R *	    push   outHandle
 000002D3  E8 00000000 E   *	    call   SetConsoleCursorPosition
							; save the current line to file
 000002D8  A1 0000003E R				mov eax, fileHandle
 000002DD  BA 00000000 R				mov edx, OFFSET buffer
 000002E2  B9 00000034					mov ecx, lineLength + 2
 000002E7  E8 00000000 E				call WriteToFile

							; read the new line into the buffer
 000002EC  E8 FFFFFDC0					call ResetBuffer
 000002F1  E8 FFFFFD4F					call SetFilePointerPosition
							INVOKE ReadFile, fileHandle, ADDR buffer, lineLength, ADDR bytesRead, NULL
 000002F6  6A 00	   *	    push   +000000000h
 000002F8  68 0000012F R   *	    push   OFFSET bytesRead
 000002FD  6A 32	   *	    push   +000000032h
 000002FF  68 00000000 R   *	    push   OFFSET buffer
 00000304  FF 35 0000003E R *	    push   fileHandle
 0000030A  E8 00000000 E   *	    call   ReadFile
 0000030F  EB 18					jmp zerocheckesi

 00000311					checkcharbound:
 00000311  83 F8 20				cmp eax, 20h ; lower ascii bound of printable characters
 00000314  7C 1A				jl endofloop
 00000316  83 F8 7E				cmp eax, 7eh ; upper ascii bound of printable characters
 00000319  7F 15				jg endofloop
 0000031B  E8 00000000 E				call WriteChar
 00000320  88 86 00000000 R				mov buffer[esi], al
 00000326  83 C6 01					add esi, 1

 00000329					zerocheckesi:
 00000329  83 FE 00					cmp esi, 0
 0000032C  7F 02					jg endofloop
 0000032E  33 F6					xor esi,esi
						
 00000330					endofloop:
 00000330  83 FE 32					cmp esi, lineLength
 00000333  0F 8C FFFFFE0B				jl L1
						
 00000339  E8 FFFFFD2B			call MakeNewLine
 0000033E  BE 00000000			mov esi, 0
 00000343  E9 FFFFFDFC			jmp L1
					

 00000348				save:
 00000348  E8 FFFFFCF8				call SetFilePointerPosition
 0000034D  A1 0000003E R			mov eax, fileHandle
 00000352  BA 00000000 R			mov edx, OFFSET buffer
 00000357  B9 00000034				mov ecx, lineLength+2
 0000035C  E8 00000000 E			call WriteToFile
 00000361  E8 00000000 E			call CloseFile
 00000366  EB 7E				jmp finishProgram

 00000368				load:
						;mov edx, OFFSET enterFilename
						;call WriteString
						INVOKE SetFilePointer, fileHandle, 0, NULL, FILE_BEGIN
 00000368  6A 00	   *	    push   +000000000h
 0000036A  6A 00	   *	    push   +000000000h
 0000036C  6A 00	   *	    push   +000000000h
 0000036E  FF 35 0000003E R *	    push   fileHandle
 00000374  E8 00000000 E   *	    call   SetFilePointer
 00000379  B8 00000007				mov eax, lightGray
 0000037E  E8 00000000 E			call SetTextColor

 00000383  66| C7 05				mov cursorPos.X, 0
	   0000005C R
	   0000
 0000038C  66| C7 05				mov cursorPos.Y, numOfHeadingLines+1
	   0000005E R
	   0003

						Invoke SetConsoleCursorPosition, outHandle, cursorPos
 00000395  FF 35 0000005C R *	    push   dword  ptr cursorPos
 0000039B  FF 35 00000042 R *	    push   outHandle
 000003A1  E8 00000000 E   *	    call   SetConsoleCursorPosition
 000003A6  C6 05 0000012E R			mov lineCount, 0
	   00

 000003AD					readBytes:
							INVOKE ReadFile, fileHandle, ADDR buffer, lineLength+2, ADDR bytesRead, NULL
 000003AD  6A 00	   *	    push   +000000000h
 000003AF  68 0000012F R   *	    push   OFFSET bytesRead
 000003B4  6A 34	   *	    push   +000000034h
 000003B6  68 00000000 R   *	    push   OFFSET buffer
 000003BB  FF 35 0000003E R *	    push   fileHandle
 000003C1  E8 00000000 E   *	    call   ReadFile
 000003C6  80 05 0000012E R				add lineCount, 1
	   01
 000003CD  83 3D 0000012F R				cmp bytesRead, 0
	   00
 000003D4  0F 84 FFFFFD6A				je L1
 000003DA  BA 00000000 R				mov edx, OFFSET buffer
 000003DF  E8 00000000 E				call WriteString
 000003E4  EB C7					jmp readBytes



 000003E6				finishProgram:
					
 000003E6  C3				ret
 000003E7			asmMain endp
				end
Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/15/16 10:03:00
template.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000133 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003E7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MakeNewLine  . . . . . . . . . .	P Near	 00000069 _TEXT	Length= 00000048 Public STDCALL
MakeTab  . . . . . . . . . . . .	P Near	 000000C8 _TEXT	Length= 00000022 Public STDCALL
  tabs . . . . . . . . . . . . .	L Near	 000000CF _TEXT	
  finish . . . . . . . . . . . .	L Near	 000000E7 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ResetBuffer  . . . . . . . . . .	P Near	 000000B1 _TEXT	Length= 00000017 Public STDCALL
  L2 . . . . . . . . . . . . . .	L Near	 000000BC _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointerPosition . . . . .	P Near	 00000045 _TEXT	Length= 00000024 Public STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TakeColorInput . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000045 Public STDCALL
  blueT  . . . . . . . . . . . .	L Near	 00000001 _TEXT	
  greenT . . . . . . . . . . . .	L Near	 00000012 _TEXT	
  redT . . . . . . . . . . . . .	L Near	 00000023 _TEXT	
  default  . . . . . . . . . . .	L Near	 00000034 _TEXT	
  finish . . . . . . . . . . . .	L Near	 00000043 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
asmMain  . . . . . . . . . . . .	P Near	 000000EA _TEXT	Length= 000002FD Public C
  L1 . . . . . . . . . . . . . .	L Near	 00000144 _TEXT	
  newline  . . . . . . . . . . .	L Near	 00000163 _TEXT	
  tabKey . . . . . . . . . . . .	L Near	 00000174 _TEXT	
  caret  . . . . . . . . . . . .	L Near	 0000017E _TEXT	
  backspace  . . . . . . . . . .	L Near	 000001C0 _TEXT	
  arrowkeys  . . . . . . . . . .	L Near	 000001DC _TEXT	
  checkright . . . . . . . . . .	L Near	 00000252 _TEXT	
  checkcursormin . . . . . . . .	L Near	 0000028B _TEXT	
  checkcursormax . . . . . . . .	L Near	 000002A1 _TEXT	
  finishcursor . . . . . . . . .	L Near	 000002B9 _TEXT	
  checkcharbound . . . . . . . .	L Near	 00000311 _TEXT	
  zerocheckesi . . . . . . . . .	L Near	 00000329 _TEXT	
  endofloop  . . . . . . . . . .	L Near	 00000330 _TEXT	
  save . . . . . . . . . . . . .	L Near	 00000348 _TEXT	
  load . . . . . . . . . . . . .	L Near	 00000368 _TEXT	
  readBytes  . . . . . . . . . .	L Near	 000003AD _TEXT	
  finishProgram  . . . . . . . .	L Near	 000003E6 _TEXT	
getche . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
getch  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
backspaceStr . . . . . . . . . .	Byte	 0000006E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000000 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 0000012F _DATA	
commands . . . . . . . . . . . .	Byte	 00000072 _DATA	
consoleInfo  . . . . . . . . . .	CONSOLE_SCREEN_BUFFER_INFO  00000046 _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000060 _DATA	
cursorPos  . . . . . . . . . . .	COORD	 0000005C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterFilename  . . . . . . . . .	Byte	 000000F9 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 0000003E _DATA	
filename . . . . . . . . . . . .	Byte	 00000035 _DATA	
format . . . . . . . . . . . . .	Byte	 000000C2 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineCount  . . . . . . . . . . .	Byte	 0000012E _DATA	
lineLength . . . . . . . . . . .	Number	 00000032h   
magenta  . . . . . . . . . . . .	Number	 00000005h   
negOne . . . . . . . . . . . . .	Word	 0000006A _DATA	
numOfHeadingLines  . . . . . . .	Number	 00000002h   
outHandle  . . . . . . . . . . .	DWord	 00000042 _DATA	
posOne . . . . . . . . . . . . .	Word	 0000006C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
tabSize  . . . . . . . . . . . .	Number	 00000003h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
windowHeight . . . . . . . . . .	Word	 00000068 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
